// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String @id @unique
  username               String @unique
  disallowedIngredients  String? @db.Text

  auth_session           Session[]
  auth_key               UserKey[]
  favourites             Favourite[]
  reviews                Review[]
}

model Session {
  id             String @id @unique
  user_id        String
  active_expires BigInt
  idle_expires   BigInt
  user           User   @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
}

model UserKey {
  id              String  @id @unique
  hashed_password String?
  user_id         String
  user            User    @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
}

model Recipe {
  id           Int       @id @default(autoincrement())
  description  String    @db.Text
  dish         String    @db.Text
  shoppingList Json
  ingredients  Json
  steps        Json
  slug         String    @unique
  createdAt    DateTime  @default(now()) @db.Timestamp(6)
  updatedAt    DateTime? @updatedAt @db.Timestamp(6)

  favourites Favourite[]
  reviews    Review[]

  @@fulltext([dish])
}

model Review {
  id        Int       @id @default(autoincrement())
  rating    Float     @db.Float
  content   String    @db.Text
  userId    String
  user      User      @relation(references: [id], fields: [userId], onDelete: Cascade)
  recipeId  Int
  recipe    Recipe    @relation(references: [id], fields: [recipeId], onDelete: Cascade)
  createdAt DateTime  @default(now()) @db.Timestamp(6)
  updatedAt DateTime? @updatedAt @db.Timestamp(6)

  @@index([userId])
  @@index([recipeId])
}

model Favourite {
  id        Int       @id @default(autoincrement())
  userId    String
  user      User      @relation(references: [id], fields: [userId], onDelete: Cascade)
  recipeId  Int
  recipe    Recipe    @relation(references: [id], fields: [recipeId], onDelete: Cascade)
  createdAt DateTime  @default(now()) @db.Timestamp(6)
  updatedAt DateTime? @updatedAt @db.Timestamp(6)

  @@index([userId])
  @@index([recipeId])
}
